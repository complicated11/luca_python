Linked List

# 这里展示了一种基础的linked形式，中间包括两个部分，一个是node之中是一个int，初始为0，每个node中间的连接线为用next来表示，null则是None

class ListNode(object):

    def __init__(self, val=0):
        self.val = val
        self.next = None


# 接下来是一些关于链表的操作
1. 删除 remove
    1.1 Remove the Linked List Elements 删除链表里面值为target的部分
2. 反转和旋转 reverse and swap
3. Linked List Cycle 


# 1.1 Remove the Linked List Elements(203)

# Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

# Example 1:
# Input: head = [1,2,6,3,4,5,6], val = 6
# Output: [1,2,3,4,5]

# Example 2:
# Input: head = [], val = 1
# Output: []

# Example 3:
#Input: head = [7,7,7,7], val = 7
#Output: []
 
# Solution:
class ListNode(object):
    
    def __init__(self, val=0):
        self.val = val
        self.next = None


class Solution(object):

    def remove(self, head: ListNode, target: int) -> ListNode:
        """
        """
        dummy = ListNode(val=0)  # 对于dummy这里
        dummy.next = head
        cur = dummy
        
        while cur:
            if cur.val == target:
                cur.next = cur.next.next
            else:
                cur = cur.next
        return dummy.next
        
        
        
