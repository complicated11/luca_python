Linked List

# 这里展示了一种基础的linked形式，中间包括两个部分，一个是node之中是一个int，初始为0，每个node中间的连接线为用next来表示，null则是None

class ListNode(object):

    def __init__(self, val=0):
        self.val = val
        self.next = None


# 接下来是一些关于链表的操作
1. remove 删除
    1.1 Remove the Linked List Elements 删除链表里面值为target的部分
    1.2 Remove Nth Node From End of List 删除倒数第n个node
    1.3 Remove Duplicates from Sorted List 删除链表中重复的值
2. 反转和旋转 reverse and swap
3. Linked List Cycle 


# 1.1 Remove the Linked List Elements(203)

# Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

# Example 1:
# Input: head = [1,2,6,3,4,5,6], val = 6
# Output: [1,2,3,4,5]

# Example 2:
# Input: head = [], val = 1
# Output: []

# Example 3:
#Input: head = [7,7,7,7], val = 7
#Output: []
 
# Solution:
class ListNode(object):
    
    def __init__(self, val=0):
        self.val = val
        self.next = None


class Solution(object):

    def remove(self, head: ListNode, target: int) -> ListNode:
        """
        """
        dummy = ListNode(val=0)  # dummy这里作为一个虚拟的节点，防止对于头节点的问题
        dummy.next = head
        cur = dummy
        
        while cur:
            if cur.val == target:
                cur.next = cur.next.next
            else:
                cur = cur.next
        return dummy.next


# 1.2 Remove Nth Node From End of List (19)
# Given the head of a linked list, remove the nth node from the end of the list and return its head.

# Example 1:
# Input: head = [1,2,3,4,5], n = 2
# Output: [1,2,3,5]

# Example 2:
# Input: head = [1], n = 1
# Output: []

# Example 3:
# Input: head = [1,2], n = 1
# Output: [1]

# 解读： 这道要求我们使用two pointers的用法，two pointers（双指针）在链表之中的操作中作为一种常规的做法。
# 因为要求是倒数的n个单个进行remove那个就提前先对fast进行操作，当fast.next is None，即到了最后一个非空链表的位置，slow进行remove即可。

# Solution:
class ListNode(object):
    
    def __init__(self, val=0):
        self.val = val
        self.next = None


class Solution(object):
    
    def remove(self, head: ListNode, n: int) -> ListNode:
        """
        """
        dummy = ListNode(val=0)
        dummy.next = head
        fast, slow = head, head
        
        while n != 0:
            fast = fast.next
            n -= 1
        
        while fast.next:
            slow = slow.next
            fast = fast.next
        
        slow.next = slow.next.next
        
        return dummy.next
    
# 1.3 Remove Duplicates from Sorted List(83)
# Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

# Example 1:
# Input: head = [1,1,2]
# Output: [1,2]

# Example 2:
# Input: head = [1,1,2,3,3]
# Output: [1,2,3]

# 解读： 这道题目的话唯一的考点就是对于当cur.next 和cur的值相同的时候进行remove，在这个前提执行之前我们需要考虑下cur.next 是否存在
# 在这个基础之上，剪枝条件就是cur.next is not None and cur.next.val == cur.val
# Solution:
class ListNode(object):
    
    def __init__(self, val=0):
        self.val = val
        self.next = None
        
       
class Solution(object):
    
    def remove(self, head: ListNode) - > ListNode:
        """
        """
        if head:
            return None
        if head.next:
            return head
        
        cur = head
        
        while cur.next:
            if cur.val == cur.next.val:
                cur.next = cur.next.next
            else:
                cur = cur.next
        
        return head
